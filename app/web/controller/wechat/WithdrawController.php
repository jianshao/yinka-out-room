<?php

namespace app\web\controller\wechat;

use app\BaseController;
use app\common\RedisCommon;
use app\domain\exceptions\FQException;
use app\domain\withdraw\dao\UserWithdrawBankInformationModelDao;
use app\domain\withdraw\dao\UserWithdrawInfoModelDao;
use app\domain\withdraw\dao\WithdrawUserDao;
use app\domain\withdraw\service\AgentPayService;
use app\facade\RequestAes as Request;
use app\form\ClientInfo;
use app\utils\Error;
use app\view\WithDrawView;

//class WithdrawController extends WebBaseController
class WithdrawController extends BaseController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->headUid = $this->checkMToken();
    }

    /**
     * @return int
     * @throws FQException
     */
    private function checkMToken()
    {
        $token = Request::param('mtoken');
        $redis = RedisCommon::getInstance()->getRedis(['select' => 15]);
        if (!$token) {
            throw new FQException(Error::getInstance()->GetMsg(Error::ERROR_TOKEN_FATAL), Error::ERROR_TOKEN_FATAL);
        }
        $userId = $redis->get($token);
        if (!$userId) {
            throw new FQException(Error::getInstance()->GetMsg(Error::ERROR_TOKEN_FATAL), Error::ERROR_TOKEN_FATAL);
        }
        return (int)$userId;
    }

    /**
     * @info 用户信息
     * @return \think\response\Json
     * @throws FQException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function userInfo()
    {
        $user = WithdrawUserDao::getInstance()->loadUser($this->headUid);
        if ($user === null) {
            throw new FQException("登录失败 用户信息异常", 500);
        }
        $userModel = $user->userModel;
        if ($userModel === null) {
            throw new FQException("登录失败 用户信息异常", 500);
        }
        if ((int)$userModel->attestation !== 1) {
            throw new FQException("登录失败 实名认证异常请检查", 500);
        }

        $userWithdrawInfoModel = UserWithdrawInfoModelDao::getInstance()->loadData($this->headUid);
        $withDrawUserInfo = $userWithdrawInfoModel->id ? WithDrawView::viewWithDrawInfo($userWithdrawInfoModel) : null;
        $userBankModel = UserWithdrawBankInformationModelDao::getInstance()->loadModelHoverForUserId($this->headUid);
        list($diamond, $banlance) = AgentPayService::getInstance()->loadUserAssetsForUid($this->headUid);
        $assets = WithDrawView::viewUserAssets($diamond, $banlance);
        $withDrawBalance = AgentPayService::getInstance()->withDrawBalanceWithSuccess($user->userRole, $userWithdrawInfoModel);
        $result = [
//                用户信息
            'userInfo' => WithDrawView::viewUserInfo($userModel),
//            是否为白名单
            'userRole' => $user->userRole,
//                用户余额
            'assets' => $assets,
//                用户提现认证信息
            'withDrawUserInfo' => $withDrawUserInfo,
//                提现银行信息
            'withDrawBankInfo' => WithDrawView::viewWithDrawBank($userBankModel),
//            剩余额度
            'withDrawBalance' => $withDrawBalance
        ];
        return rjson($result, 200, "success");
    }

    /**
     * @info 身份认证信息
     * @return \think\response\Json
     * @throws FQException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function identityInfo()
    {
//        $this->headUid=1699619;
        $model = AgentPayService::getInstance()->loadAuditWithUserIdentityOrUserCard($this->headUid);
        if ($model === null) {
            throw new FQException("用户认证信息异常", 500);
        }
        $viewModel = WithDrawView::identityInfoView($model);
        $data['model'] = $viewModel;
        return rjson($data, 200, 'success');
    }


    /**
     * @info 提交用户的提现认证信息
     * @return \think\response\Json
     * @throws FQException
     * @throws \OSS\Core\OssException
     * @throws \Throwable
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function storeWithDrawUserInfo()
    {
        $phone = Request::param('phone');
        $identityCardFrontSrc = Request::file('identityCardFront');
        $identityCardOppositeSrc = Request::file('identityCardOpposite');
        if (empty($phone) || empty($identityCardFrontSrc) || empty($identityCardOppositeSrc)) {
            throw new FQException(Error::getInstance()->GetMsg(Error::INVALID_PARAMS), Error::INVALID_PARAMS);
        }
        if ($identityCardFrontSrc->getSize() >= 6291456 || $identityCardOppositeSrc->getSize() >= 6291456) {
            throw new FQException("上传文件不能超过6m请检查重试", 409);
        }
        $result = AgentPayService::getInstance()->storeWithDrawUserInfo($this->headUid, $phone, $identityCardFrontSrc, $identityCardOppositeSrc);
        if (empty($result)) {
            throw new FQException("store data error", 500);
        }
        return rjson([], 200, "success");
    }

    /**
     * @info 查看所有提现账号
     */
    public function withDrawBankShow()
    {
        $modelList = AgentPayService::getInstance()->withDrawBankShow($this->headUid);
        $dataList = $this->withDrawBankShowViewList($modelList);
        $result['list'] = $dataList;
        return rjson($result, 200, "success");
    }


    /**
     * @param $modelList
     * @return array
     */
    private function withDrawBankShowViewList($modelList)
    {
        $result = [];
        foreach ($modelList as $model) {
            $result[] = WithDrawView::withDrawBankShowView($model);
        }
        return $result;
    }

    /**
     * @info 添加提现账号
     * @return \think\response\Json
     * @throws FQException
     */
    public function withDrawBankStore()
    {
        $username = Request::param('username', "");
        $bankName = Request::param('bankName', "");  //银行名字
        $bankCardNumber = Request::param('bankCardNumber', "");
        $payType = Request::param('payType', 0, 'intval');//打款类型 [0支付宝，2银行卡]
        if (empty($username) || empty($bankCardNumber)) {
            throw new FQException(Error::getInstance()->GetMsg(Error::INVALID_PARAMS), Error::INVALID_PARAMS);
        }
        $result = AgentPayService::getInstance()->withDrawBankStore($this->headUid, $username, $bankName, $bankCardNumber, $payType);
        if (empty((int)$result)) {
            throw new FQException("添加失败，内部错误", 500);
        }
        return rjson([], 200, "success");
    }

    /**
     * @info 删除提现账号
     * @return \think\response\Json
     * @throws FQException
     */
    public function withDrawBankDelete()
    {
        $id = Request::param('id', 0, 'intval');
        if (empty($id)) {
            throw new FQException(Error::getInstance()->GetMsg(Error::INVALID_PARAMS), Error::INVALID_PARAMS);
        }
        $result = AgentPayService::getInstance()->withDrawBankDelete($this->headUid, $id);
        if (empty((int)$result)) {
            throw new FQException("操作失败，内部错误", 500);
        }
        return rjson([], 200, "success");
    }


    /**
     * @info 设置提现账号为默认
     * @return \think\response\Json
     * @throws FQException
     */
    public function withDrawBankSetDefault()
    {
        $id = Request::param('id', 0, 'intval');
        $setEmpty = Request::param('set_empty', 0, 'intval');
        if (empty($id)) {
            throw new FQException(Error::getInstance()->GetMsg(Error::INVALID_PARAMS), Error::INVALID_PARAMS);
        }
        $result = AgentPayService::getInstance()->withDrawBankSetDefault($this->headUid, $id, $setEmpty);
        if (empty((int)$result)) {
            throw new FQException("操作失败，内部错误", 500);
        }
        return rjson([], 200, "success");
    }


    /**
     * @info 提交申请
     * @return \think\response\Json
     * @throws FQException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function withDrawApply()
    {
        $amount = Request::param('amount', "");
        $bid = Request::param('bid', 0);
        if (empty($bid) || empty($amount)) {
            throw new FQException(Error::getInstance()->GetMsg(Error::INVALID_PARAMS), Error::INVALID_PARAMS);
        }

        if (!is_numeric($amount) || is_float($amount)) {
            throw new FQException("提现金额必须是整数", 500);
        }
        if ((int)$amount % 100 != 0) {
            throw new FQException("提现金额必须为100或者100的倍数", 500);
        }
        if ($amount < 100) {
            throw new FQException("提现金额必须大于100", 500);
        }
        if ($amount > 50000) {
            throw new FQException("提现金额必须小于50000", 500);
        }

        $clientInfo = new ClientInfo();
        $clientInfo->fromRequest($this->request);
        AgentPayService::getInstance()->withDrawApply($this->headUid, $amount, $bid, $clientInfo);
        return rjson([], 200, "success");
    }


    /**
     * @info 账单列表
     * @return \think\response\Json
     * @throws FQException
     */
    public function withDrawOrderList()
    {
        $strDate = Request::param('strDate', "");
        $page = Request::param('page', 1, 'intval');
        $pageNum = Request::param('pageNum', 20, 'intval');

        if (empty($page) || empty($pageNum)) {
            throw new FQException(Error::getInstance()->GetMsg(Error::INVALID_PARAMS), Error::INVALID_PARAMS);
        }
        if (empty($strDate)) {
            $strDate = date("Y-m");
        }
        $models = AgentPayService::getInstance()->withDrawOrderList($this->headUid, $strDate, $page, $pageNum);
        $totalPrice = AgentPayService::getInstance()->withDrawOrderTotalPrice($this->headUid, $strDate);
        $result['list'] = $this->viewWithDrawOrderList($models);
        $result['totalPrice'] = $totalPrice;
        return rjson($result, 200, "success");
    }


    /**
     * @param $models
     * @return array
     */
    private function viewWithDrawOrderList($models)
    {
        $result = [];
        foreach ($models as $model) {
            $result[] = WithDrawView::viewWithDrawOrder($model);
        }
        return $result;
    }

}



















