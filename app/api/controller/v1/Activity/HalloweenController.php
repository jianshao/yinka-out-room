<?php

namespace app\api\controller\v1\Activity;

use app\BaseController;
use app\common\RedisCommon;
use app\domain\activity\halloween\service\HalloweenService;
use app\domain\exceptions\FQException;
use app\facade\RequestAes as Request;
use app\query\user\cache\UserModelCache;
use app\utils\ArrayUtil;
use app\utils\CommonUtil;
use app\utils\Error;


class HalloweenController extends BaseController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->headUid = $this->checkMToken();
    }

    /**
     * @return int
     * @throws FQException
     */
    private function checkMToken()
    {
        $token = $this->request->param('mtoken');
        $redis = RedisCommon::getInstance()->getRedis();
        if (!$token) {
            throw new FQException('用户信息错误', 500);
        }
        $userId = $redis->get($token);
        if (!$userId) {
            throw new FQException('用户信息错误', 500);
        }
        return (int)$userId;
    }

    public function getMySelfValue() {
        $userId = $this->headUid;
        $redis = RedisCommon::getInstance()->getRedis(['select' => 13]);
        $timestamp = time();
        $richKey = HalloweenService::getInstance()->getRichDay1RedisKey($timestamp);
        $likeKey = HalloweenService::getInstance()->getLikeDay1RedisKey($timestamp);
        $givingTask = $redis->zScore($richKey, $userId);
        $receiveTask = $redis->zScore($likeKey, $userId);
        return rjson(['givingTask' => empty($givingTask) ? 0 : $givingTask,'receiveTask' => empty($receiveTask) ? 0 : $receiveTask]);
    }


    public function getRichRanking()
    {
        $userId = $this->headUid;
        list($richRank, $myRank) = $this->getRichRankList($userId);
        return rjson(['rankingResponseList' => $richRank, 'myRankingResponse' => $myRank]);
    }

    public function getLikeRanking()
    {
        $userId = $this->headUid;
        list($richRank, $myRank) = $this->getLikeRankList($userId);
        return rjson(['rankingResponseList' => $richRank, 'myRankingResponse' => $myRank]);
    }

    public function getRankList($key, $redis)
    {
        return $redis->zRevRange($key, 0, 9, true);
    }

    public function getRichRankList($myId) {
        $redis = RedisCommon::getInstance()->getRedis(['select' => 13]);
        $richKey = HalloweenService::getInstance()->getRichAll1RedisKey();
        return $this->getArr($richKey, $redis, $myId);
    }

    public function getLikeRankList($myId) {
        $redis = RedisCommon::getInstance()->getRedis(['select' => 13]);
        $likeKey = HalloweenService::getInstance()->getLikeAll1RedisKey();
        return $this->getArr($likeKey, $redis, $myId);
    }

    /**
     * @param string $key
     * @param $redis
     * @param $myId
     * @return array
     */
    public function getArr(string $key, $redis, $myId): array
    {
        $rankList = $this->getRankList($key, $redis);
        $score = $redis->zScore($key, $myId);
        $ret = [];
        $userIds = [];
        if (!empty($rankList)) {
            $userIds = array_keys($rankList);
            $scores = array_values($rankList);
            $userInfoMap = UserModelCache::getInstance()->findUserModelMapByUserIds($userIds);
            if (!empty($userInfoMap)) {
                for ($i = 0; $i < count($userIds); $i++) {
                    $userId = $userIds[$i];
                    $userModel = ArrayUtil::safeGet($userInfoMap, $userId);
                    if (!empty($userModel)) {
                        $ret[] = [
                            'userId' => $userModel->userId,
                            'nickName' => $userModel->nickname,
                            'prettyId' => $userModel->prettyId,
                            'headerImg' => CommonUtil::buildImageUrl($userModel->avatar),
                            'totalValue' => $rankList[$userId],
                        ];
                    }
                }
            }
        }
        $userModel = UserModelCache::getInstance()->getUserInfo($this->headUid);
        $myInfo = [
            'id' => $userModel->userId,
            'nickName' => $userModel->nickname,
            'prettyId' => $userModel->prettyId,
            'headerImg' => CommonUtil::buildImageUrl($userModel->avatar),
            'totalValue' => empty($score) ? 0 : $score,
            'diffOnRank' => empty($rankList) ? 0 : array_pop($scores) - $score,
            'isOnRank' => in_array($userModel->userId, $userIds)
        ];
        return [$ret, $myInfo];
    }
}