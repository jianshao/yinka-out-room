<?php

namespace app\api\controller\v1\Activity;

use app\BaseController;
use app\common\RedisCommon;
use app\domain\activity\gameVote\GameVoteService;
use app\domain\exceptions\FQException;
use app\facade\RequestAes as Request;

//游戏投票
class GameVoteController extends BaseController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->headUid = $this->checkMToken();
    }


    /**
     * @return int
     * @throws FQException
     */
    private function checkMToken()
    {
        $token = $this->request->param('mtoken');
        $redis = RedisCommon::getInstance()->getRedis();
        if (!$token) {
            throw new FQException('用户信息错误', 500);
        }
        $userId = $redis->get($token);
        if (!$userId) {
            throw new FQException('用户信息错误', 500);
        }
        return (int)$userId;
    }


    /**
     * 游戏首页数据列表
     * @return [type] [description]
     */
    public function gameVoteList()
    {
        $userId = $this->headUid;
        $timestamp = time();
//        初始化数据
        list($listData, $voteNum) = GameVoteService::getInstance()->init($userId, $timestamp);
        $result['list'] = $listData;
        $result['voteNumber'] = $voteNum;
        return rjson($result, 200, 'success');
    }

    //投票
    public function gameVoteFire()
    {
        $userId = $this->headUid;
        $id = Request::param('id', 0, 'intval');
        if ($id === 0) {
            throw new FQException("param error");
        }
        $timestamp = time();
        GameVoteService::getInstance()->isAction($userId, $timestamp);
//        投票
        GameVoteService::getInstance()->fire($userId, $id, 1, $timestamp);
//        转换返回消息格式
        return rjson([], 200, 'success');
    }

}