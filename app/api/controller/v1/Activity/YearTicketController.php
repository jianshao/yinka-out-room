<?php

namespace app\api\controller\v1\Activity;

use app\BaseController;
use app\common\RedisCommon;
use app\domain\activity\yearTicket\Config;
use app\domain\activity\yearTicket\YearTicketGuildDao;
use app\domain\activity\yearTicket\YearTicketService;
use app\domain\activity\yearTicket\YearTicketUserDao;
use app\domain\exceptions\FQException;
use app\domain\guild\dao\MemberGuildModelDao;
use app\query\user\cache\UserModelCache;
use app\utils\CommonUtil;

class YearTicketController extends BaseController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->headUid = $this->checkMToken();
    }


    private function checkMToken()
    {
        $token = $this->request->param('mtoken');
        $redis = RedisCommon::getInstance()->getRedis();
        if (!$token) {
            throw new FQException('用户信息错误', 500);
        }
        $userId = $redis->get($token);
        if (!$userId) {
            throw new FQException('用户信息错误', 500);
        }
        return $userId;
    }


    /**
     * @info  初始化首页数据
     * @throws FQException
     */
    public function index()
    {
        $userId = $this->checkMToken();
        $timestamp = YearTicketService::getInstance()->getTimestamp();
        $config = Config::loadConf();
        $upgradeData = YearTicketService::getInstance()->getLevelUpgradeDisplay();
        $localUpgradeData = YearTicketService::getInstance()->getLevelUpgradeOne($config, $timestamp);
        $hover = $localUpgradeData['id'] ?: 0;
//        赛制进度数据
        $result['schedule'] = [
            "list" => $upgradeData,
            "hover" => $hover
        ];
//        当前赛制结束倒计时
        $expireTime = strtotime($localUpgradeData['endTime']) - $timestamp;
        if ($expireTime <= 0) {
            $expireTime = 0;
        }
        $result['expire_time'] = $expireTime;
//        初始化所有工会和积分数据 后根据赛段截取数量
        $guildModelSortList = YearTicketService::getInstance()->getGuildRankList($localUpgradeData);
//        根据当前赛制，获取工会的数据列表
        list($online, $out) = $this->displayGuildDataList($guildModelSortList, $localUpgradeData);
//        通过榜单数据初始化出用户自己的数据
        $selfRankData = $this->getSelfGuildRankData($userId, $online, $out);
//        上榜的
        $result['guildRankList']['online'] = $online;
//        面临淘汰的
        $result['guildRankList']['shiftOut'] = $out;
//        当前排名
        $result['guildRankList']['self'] = $selfRankData;

//        个人榜单
        $userRankList = $this->getUserRankList();
        list($online, $out) = $this->displayUserDataList($userRankList);
        $selfRankData = $this->getSelfUserRankData($userId, $online, $out);
//        上榜的
        $result['userRankList']['online'] = $online;
//        面临淘汰的
        $result['userRankList']['shiftOut'] = $out;
//        当前排名
        $result['userRankList']['self'] = $selfRankData;

        $result['actionType'] = "";
        try {
            YearTicketService::getInstance()->isEnd($timestamp);
        } catch (FQException $e) {
            if ($e->getCode() === 515) {
                $result['actionType'] = "活动已结束";
            }
        }
        return rjson($result, 200, 'success');
    }


    public function historyRank()
    {
        $this->checkMToken();
        $result = [];
//        工会榜单
        $countNumber = 50;
        $rankData = YearTicketGuildDao::getInstance()->getRankGuildList(0, $countNumber);
        $result['guildRankList'] = $this->displayHistoryGuildDataList($rankData);

//        个人榜单
        $userRankData = $this->getUserRankList();
        list($result['userRankList'], $_) = $this->displayUserDataList($userRankData);
        return rjson($result, 200, 'success');
    }


    public function historyRankSecond()
    {
        $this->checkMToken();
        $result = [];
//        工会榜单
        $countNumber = 50;
        $rankData = YearTicketGuildDao::getInstance()->getRankGuildList(0, $countNumber);
        $result['guildRankList'] = $this->displayHistoryGuildDataList($rankData, true);

//        个人榜单
        $userRankData = $this->getUserRankList();
        list($result['userRankList'], $_) = $this->displayUserDataList($userRankData);
        return rjson($result, 200, 'success');
    }

    /**
     * @param $guildModelSortList
     * @param false $showScore //是否返回分数
     * @return array
     */
    private function displayHistoryGuildDataList($guildModelSortList, $showScore = false)
    {
        $guildIds = [];
//        获取工会ids
        foreach ($guildModelSortList as $itemModel) {
            $guildIds[] = $itemModel->guildId;
        }

        $guildDatas = MemberGuildModelDao::getInstance()->loadNicknameAvatarList($guildIds);
        $result = [];
        $rank = 1;
        $guildModelScoreExpMap = $this->getGuildScoreExpMap($guildModelSortList);
        foreach ($guildModelSortList as $itemModel) {
            $guildId = $itemModel->guildId;
            $guildData = $guildDatas[$guildId] ?? [];
            $itemModel->nickname = $guildData['nickname'] ?? "";
            $itemModel->avatar = $guildData['logo_url'] ?? "";
            $itemModel->rank = $rank;
            $displayItem['rank'] = $rank;
            $displayItem['guildId'] = $itemModel->guildId;
            $displayItem['avatarUrl'] = CommonUtil::buildImageUrl($itemModel->avatar);
            $displayItem['name'] = $itemModel->nickname;
            $nextLevelExp = $guildModelScoreExpMap[$guildId] ?? 0;
            if ($showScore) {
                $displayItem['score'] = $itemModel->totalScore() ?: 0;
            }
            $displayItem['nextLevelExp'] = $nextLevelExp;
            $result[] = $displayItem;
            $rank++;
        }
        return $result;
    }


    /**
     * @param $userId
     * @param $online
     * @param $out
     * @return array
     */
    private function getSelfUserRankData($userId, $online, $out)
    {
        if (empty($userId)) {
            return [];
        }
        $userModels = UserModelCache::getInstance()->findUserModelMapByUserIds([$userId]);
        //获取距离上一名的score
        $mergeRankData = array_merge($online, $out);
        $userlocalRank = [];
        foreach ($mergeRankData as $rankData) {
            if ($rankData['userId'] === (int)$userId) {
                $userlocalRank = $rankData;
                break;
            }
        }

        list($score, $_) = YearTicketService::getInstance()->getUserScoreRankSecond($userId);
//        没上榜，取最后一名数据，rank为0
        if (empty($userlocalRank)) {
            $nextLevelExp = 0;
            $selfScore = $score ?: 0;
            $rank = 0;
        } else {
//            如果上榜了,取上榜数据
            $nextLevelExp = $userlocalRank['nextLevelExp'];
            $selfScore = 0;
            $rank = $userlocalRank['rank'];
        }
        $userModel = $userModels[$userId] ?? [];
        $result['rank'] = $rank;
        $result['userId'] = (int)$userId;
        $result['avatarUrl'] = CommonUtil::buildImageUrl($userModel->avatar);
        $result['name'] = $userModel->nickname;
        $result['score'] = $selfScore;
        $result['nextLevelExp'] = $nextLevelExp;
        return $result;
    }


    /**
     * 通过榜单数据初始化出用户自己的数据
     * @param $userId
     * @param $online
     * @param $out
     * @return array
     */
    private function getSelfGuildRankData($userId, $online, $out)
    {
//        获取自己的工会id
        $userModel = UserModelCache::getInstance()->getUserInfo($userId);
        if ($userModel === null) {
            return [];
        }
//        如果没有则return 空
        if ($userModel->guildId === 0) {
            return [];
        }
//        如果有则查询自己的工会分数 并初始化工会数据
        $guildId = $userModel->guildId;
        $guildDatas = MemberGuildModelDao::getInstance()->loadNicknameAvatarList([$guildId]);
        $guildData = $guildDatas[$guildId] ?? [];
        if (empty($guildData)) {
            return [];
        }

        $mergeRankData = array_merge($online, $out);
        $guildLocalRank = [];
        foreach ($mergeRankData as $rankData) {
            if ($rankData['guildId'] === (int)$guildId) {
                $guildLocalRank = $rankData;
                break;
            }
        }

        list($score, $_) = YearTicketService::getInstance()->getGuildScoreRankSecond($guildId);
//        没上榜，取用户当前的分值，rank为0
        if (empty($guildLocalRank)) {
            $nextLevelExp = 0;
            $selfScore = $score ?: 0;
            $rank = 0;
        } else {
//            如果上榜了,取上榜数据
            $nextLevelExp = $guildLocalRank['nextLevelExp'];
            $selfScore = 0;
            $rank = $guildLocalRank['rank'];
        }
        $result['rank'] = $rank;
        $result['guildId'] = (int)$guildData['id'];
        $result['avatarUrl'] = CommonUtil::buildImageUrl($guildData['logo_url']);
        $result['name'] = $guildData['nickname'];
        $result['score'] = $selfScore;
        $result['nextLevelExp'] = $nextLevelExp;
        return $result;
    }

    /**
     * @return array
     */
    private function getUserRankList()
    {
        return YearTicketUserDao::getInstance()->getRankUserList();
    }



    /**
     * @info 根据当前赛制，获取工会的数据列表 返回上榜和未上榜工会数据
     * @param $guilRankList
     * @param $localUpgradeData
     * @return array[]
     */
    private function displayGuildDataList($guildModelSortList, $localUpgradeData)
    {
        $guildIds = [];
//        获取工会ids
        foreach ($guildModelSortList as $itemModel) {
            $guildIds[] = $itemModel->guildId;
        }
        if ($localUpgradeData['rankNumber'] == 0) {
            $limit = 50;
        } else {
            $limit = $localUpgradeData['rankNumber'] ?? 1;
        }

        $timestamp = YearTicketService::getInstance()->getTimestamp();
        try {
            YearTicketService::getInstance()->isEnd($timestamp);
        } catch (FQException $e) {
            if ($e->getCode() === 515) {
                $limit = 1;
            }
        }

        $guildDatas = MemberGuildModelDao::getInstance()->loadNicknameAvatarList($guildIds);
        $online = [];
        $out = [];
        $rank = 1;
        $guildModelScoreExpMap = $this->getGuildScoreExpMap($guildModelSortList);
        foreach ($guildModelSortList as $itemModel) {
            $guildId = $itemModel->guildId;
            $guildData = $guildDatas[$guildId] ?? [];
            $itemModel->nickname = $guildData['nickname']??"";
            $itemModel->avatar = $guildData['logo_url']??"";
            $itemModel->rank = $rank;
            $displayItem['rank'] = $rank;
            $displayItem['guildId'] = $itemModel->guildId;
            $displayItem['avatarUrl'] = CommonUtil::buildImageUrl($itemModel->avatar);
            $displayItem['name'] = $itemModel->nickname;
            $nextLevelExp = $guildModelScoreExpMap[$guildId] ?? 0;
            $displayItem['nextLevelExp'] = $nextLevelExp;
            if ($rank <= $limit) {
                $online[] = $displayItem;
            } else {
                $out[] = $displayItem;
            }
            $rank++;
        }
        return [$online, $out];
    }


    private function getGuildScoreExpMap($guildModelSortList)
    {
        $resetData = [];
        foreach ($guildModelSortList as $guildModel) {
            $itemData['guildId'] = $guildModel->guildId;
            $itemData['score'] = $guildModel->totalScore() ?: 0;
            $resetData[] = $itemData;
        }
        return YearTicketGuildDao::getInstance()->getShowRank($resetData);
    }

    /**
     * @param $userRankList
     * @return array[]
     */
    private function displayUserDataList($userRankList)
    {
        $userIds = array_keys($userRankList);
        $limit = 50;
        $userModelMap = UserModelCache::getInstance()->findUserModelMapByUserIds($userIds);
        $rank = 1;
        $online = [];
        $out = [];
        foreach ($userRankList as $userId => $nextLevelExp) {
            $displayItem=[];
            $userModel = $userModelMap[$userId] ?? [];
            if (empty($userModel)){
                continue;
            }
            $displayItem['rank'] = $rank;
            $displayItem['userId'] = $userModel->userId??0;
            $displayItem['avatarUrl'] = CommonUtil::buildImageUrl($userModel->avatar);
            $displayItem['name'] = $userDataItem['nickname']??"";
            $displayItem['nextLevelExp'] = $nextLevelExp;
            if ($rank <= $limit) {
                $online[] = $displayItem;
            }
            $rank++;
        }
        return [$online, $out];
    }

}