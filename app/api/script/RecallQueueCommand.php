<?php

namespace app\api\script;

use app\domain\exceptions\FQException;
use app\domain\recall\dao\PushRecallConfModelDao;
use app\domain\recall\queue\AmpQueue;
use app\domain\recall\service\MemberRecallService;
use app\utils\Error;
use think\console\Command;
use think\console\Input;
use think\console\input\Argument;
use think\console\Output;
use think\facade\Log;

ini_set('set_time_limit', 0);

/**
 * @info  用户召回（长期活动队列）
 * Class RecallQueueCommand
 * @package app\api\script
 * @command  php think RecallQueueCommand handler >> /tmp/RecallQueueCommandHandler.log 2>&1
 * @command  php think RecallQueueCommand handlerUserPush >> /tmp/RecallQueueCommandHandlerUserPush.log 2>&1
 * @command  php think RecallQueueCommand testPublisher >> /tmp/RecallQueueTestPublisher.log 2>&1
 * @command  php think RecallQueueCommand testConsumer >> /tmp/RecallQueueTestConsumer.log 2>&1
 */
class RecallQueueCommand extends Command
{
    private $offset = 0;
    private $endOffset = 0;
    private $recallSendUserSetKey = "recallQueue";
    private $smsTemplate = '【音恋语音】{$var},来领动态头像框~已放入您的背包rongqii.cn/{$var}拒D';
    private $deadqueueListKey = "recallSmsDeadqueue";
    private $appDev;

    const COMMAND_NAME = "RecallQueueCommand";

    protected function configure()
    {
        // 指令配置
        $this->setName('app\command\RecallQueueCommand')
            ->addArgument('func', Argument::OPTIONAL, "switch func")
            ->addArgument('id', Argument::OPTIONAL, "zb_push_recall_conf id")
            ->setDescription('user cancellation check');
    }

    private function getUnixTime()
    {
        return time();
    }

    private function getDateTime()
    {
        return date("Y-m-d H:i:s", $this->getUnixTime());
    }

    protected function execute(Input $input, Output $output)
    {
        $func = $input->getArgument('func') ?: "handler";
        $output->writeln(sprintf('app\command\RecallQueueCommand entry func:%s offset:%d endOffset:%d date:%s', $func, $this->offset, $this->endOffset, $this->getDateTime()));
        try {
            $refreshNumber = $this->{$func}();
        } catch (\Exception $e) {
            $output->writeln(sprintf("app\command\RecallQueueCommand execute func:%s date:%s error:%s error trice:%s", $func, $this->getDateTime(), $e->getMessage(), $e->getTraceAsString()));
            return;
        }
        // 指令输出
        $output->writeln(sprintf('app\command\RecallQueueCommand success end func:%s date:%s exec refreshNumber:%d', $func, $this->getDateTime(), $refreshNumber));
    }

    /**
     * @info 启动召回-任务解析消费者 member_recall_test
     * @param Output $output
     * @return int
     */
    private function handler()
    {
        $output = $this->output;
        $callback = function ($msg) use ($output) {
            $logmsg = sprintf("RecallQueueCommand handler taskConsumer msgBody:%s", $msg->body);
            $output->info($logmsg);
            Log::info($logmsg);
            if ($msg->body) {
                MemberRecallService::getInstance()->taskConsumer($msg);
            }
        };
        AmpQueue::getInstance()->consumer($callback);
        return 1;
    }

    /**
     * @info 启动召回-用户推送执行消费者 member_recall_user_push_test
     * @param Output $output
     * @return int
     */
    private function handlerUserPush()
    {
        $output = $this->output;
        $callback = function ($msg) use ($output) {
            $logmsg = sprintf("RecallQueueCommand UserPushConsumer entry msgBody:%s", $msg->body);
            $output->info($logmsg);
            Log::info($logmsg);
            if ($msg->body) {
                MemberRecallService::getInstance()->userPushConsumer($msg);
            }
        };
        AmpQueue::getInstance()->consumerUserPush($callback);
        return 1;
    }


    /**
     * @info 触达用户, 根据传入的配置id创建扫描任务队列
     * @return bool
     * @throws FQException
     */
    private function touchUsers()
    {
        $inputId = $this->input->getArgument('id');
        $id = $inputId ? (int)$inputId : 0;
        if (empty($id)) {
            throw new FQException(Error::getInstance()->GetMsg(Error::INVALID_PARAMS), Error::INVALID_PARAMS);
        }
        $pushTypeConfModel = PushRecallConfModelDao::getInstance()->loadModel($id);
        if ($pushTypeConfModel === null) {
            throw new FQException("push data error", 500);
        }
//        创建任务
        return MemberRecallService::getInstance()->createQueue($pushTypeConfModel);
    }


    /**
     * @throws FQException
     * demo :"{"id":117,"push_when":{"charge_max":0,"charge_min":0,"time":86400},"push_type":"rtdsms","template_ids":"[14]"}"
     */
    public function testRtdSmsCusumerTask()
    {
        $originStr = '{"id":123,"push_when":{"charge_max":0,"charge_min":0,"time":2592000},"push_type":"rtdsms","template_ids":"[\"20\",\"21\",\"22\"]"}';
//        $originStr = '{"id":117,"push_when":{"charge_max":0,"charge_min":0,"time":86400},"push_type":"rtdsms","template_ids":"[\"14\"]"}';
        $originData = json_decode($originStr, true);
        $re = MemberRecallService::getInstance()->handlerQueueConsumer($originData);
        var_dump($re);
        die;
    }

    /**
     * @throws FQException
     * @demo {"push_recall_conf":"{\"id\":117,\"push_when\":{\"charge_max\":0,\"charge_min\":0,\"time\":86400},\"push_type\":\"rtdsms\",\"template_ids\":\"[14]\"}","user_ids":"[1702863,1702862,1697567,1697566]"}
     */
    public function testRtdSmsCusumerUserPush()
    {
//        $originStr = '{"push_recall_conf":"{\"id\":117,\"push_when\":{\"charge_max\":0,\"charge_min\":0,\"time\":86400},\"push_type\":\"rtdsms\",\"template_ids\":\"[14]\"}","user_ids":"[1702863,1702862,1697567,1697566]"}';
//        $originStr = '{"push_recall_conf":"{\"id\":123,\"push_when\":{\"charge_max\":0,\"charge_min\":0,\"time\":2592000},\"push_type\":\"rtdsms\",\"template_ids\":\"[20,21,22]\"}","user_ids":"[1702863,1702862,1697567,1697566,1697565]"}';
//        $originStr = '{"push_recall_conf":"{\"id\":4,\"push_when\":{\"charge_max\":500,\"charge_min\":100,\"time\":3600},\"push_type\":\"getuipush\",\"template_ids\":\"[3,4]\"}","user_ids":"[1456410,1456408,1456402]"}';
//        $originStr='{"push_recall_conf":"{\"id\":2,\"push_when\":{\"charge_max\":0,\"charge_min\":0,\"time\":300},\"push_type\":\"getuipush\",\"template_ids\":\"[\\\"1\\\"]\"}","user_ids":"[1697590,1701174,1700775,1701173,1701175,1201009,1701154,1086590,1701179,1701176,1701180,1700041,1701178,1700587,1151183,1700284,1700570,1700575,1700588,1700710,1700089,1701021,1103364,1701181,1439778,1697576,1697578,1700365,1178493,1701016,1699716,1700586,1697579,1191325,1700467,1021100,1697584,1701159,1697585,1697574,1700857,1701134,1700107,1700336]"}';
        $originStr = '{
    "push_recall_conf":"{\"id\":4,\"push_when\":{\"charge_max\":0,\"charge_min\":0,\"time\":86400},\"push_type\":\"getuipush\",\"template_ids\":\"[3]\"}",
    "user_ids
}';
        $originData = json_decode($originStr, true);
        $re = MemberRecallService::getInstance()->handlerUserPushConsumer($originData);
        var_dump($re);
        die;
    }


}
